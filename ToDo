- Testar com arquivos mais  grandes

    CyberNet Dom Bas√≠lio
    Oferece arquivos de teste para download, incluindo um arquivo de 500 MB para testar sua conex√£o.
    [üîóZ este sua conex√£o! ‚Äì CyberNet](https://cybernetdombasilio.com.br/site/index.php/teste-sua-conexao/)

    GetSampleFiles.com
    Disponibiliza uma variedade de arquivos de amostra em diferentes formatos e tamanhos, incluindo arquivos compactados como ZIP, RAR, TAR, 7Z, GZIP e BZIP2.
    [üîó Obter arquivos de amostra para teste](https://pt.getsamplefiles.com/arquivos-de-amostra)


- Implementar mais de um cliente
  - Multithreading  
  
- Implementar checksum no cliente e servidor checa 

    Como funciona:

    Cliente:

        Calcula o checksum MD5 do arquivo antes de enviar.

        Envia para o servidor:

            Caminho relativo do arquivo

            Tamanho do arquivo

            Checksum MD5

            Conte√∫do do arquivo

    Servidor:

        Recebe os metadados (nome, tamanho, checksum) e o conte√∫do do arquivo.

        Calcula o checksum do conte√∫do recebido.

        Compara o checksum calculado com o checksum enviado pelo cliente.

        Se bater:

            Salva o arquivo

            Envia um ACK_FILE_OK

        Se n√£o bater:

            N√£o salva (ou sinaliza erro)

            Envia um ACK_FILE_FAIL

- An√°lise por dias da semana
  - Transformar o timestamp em dia da semana

######################################  VERS√ïES ###############################################
- Versao_1
    - TCP/IP
    - Threads

- Versao_2
    - Versao_1 
    - Envio de arquivos e diret√≥rios

- Versao_3
    - Versao_2
    - Cada cliente ter√° um diret√≥rio e quando for enviado aparce no servidor e no cliente. Outros clientes podem ver s√≥ se o cliente que enviar escolher a op√ß√£o publico ou privado. Implemente apartir desse c√≥digo.

#####################################  IA #####################################################
Por que usar chunks?
Evita sobrecarga de mem√≥ria

Ler um arquivo de 1 GB de uma vez consumiria toda a RAM.

Chunks processam dados gradualmente.

Melhor desempenho em redes

Pacotes menores trafegam com mais efici√™ncia.

Permite in√≠cio do processamento antes do recebimento total.

Toler√¢ncia a falhas

Se a conex√£o cair, parte dos dados j√° foi recebida/salva.

Exemplo Pr√°tico
Se um arquivo de 12 KB √© recebido com TAM_BUFFER = 4096:

1¬∫ chunk: 4096 bytes

2¬∫ chunk: 4096 bytes

3¬∫ chunk: 3808 bytes (restante)

Todos s√£o concatenados no final (b''.join(chunks)) para formar o arquivo completo.