# ToDo

## Pend√™ncias
- Implementar checksum no cliente e servidor
    - **Como funciona**:
        - **Cliente**:
            - Calcula o checksum MD5 do arquivo antes de enviar.
            - Envia para o servidor:
                - Caminho relativo do arquivo
                - Tamanho do arquivo
                - Checksum MD5
                - Conte√∫do do arquivo
        - **Servidor**:
            - Recebe os metadados (nome, tamanho, checksum) e o conte√∫do do arquivo.
            - Calcula o checksum do conte√∫do recebido.
            - Compara o checksum calculado com o checksum enviado pelo cliente.
            - **Se bater**:
                - Salva o arquivo
                - Envia um `ACK_FILE_OK`
            - **Se n√£o bater**:
                - N√£o salva (ou sinaliza erro)
                - Envia um `ACK_FILE_FAIL`

- Testar com arquivos grandes
    - **Por que usar chunks?**
        - Evita sobrecarga de mem√≥ria:
            - Ler um arquivo de 1 GB de uma vez consumiria toda a RAM.
            - Chunks processam dados gradualmente.
        - Melhor desempenho em redes:
            - Pacotes menores trafegam com mais efici√™ncia.
            - Permite in√≠cio do processamento antes do recebimento total.
        - Toler√¢ncia a falhas:
            - Se a conex√£o cair, parte dos dados j√° foi recebida/salva.
        - **Exemplo pr√°tico**:
            - Se um arquivo de 12 KB √© recebido com `TAM_BUFFER = 4096`:
                - 1¬∫ chunk: 4096 bytes
                - 2¬∫ chunk: 4096 bytes
                - 3¬∫ chunk: 3808 bytes (restante)
            - Todos s√£o concatenados no final (`b''.join(chunks)`) para formar o arquivo completo.

- Implementar an√°lises com Python
    - Transformar o timestamp em dia da semana

---

## Vers√µes
- **Vers√£o 1**
    - TCP/IP
    - Threads

- **Vers√£o 2**
    - Baseada na Vers√£o 1
    - Envio de arquivos e diret√≥rios
    - Mais robusta e r√°pida por conta das fun√ß√µes de cabe√ßalho
    - **Problema**:
        - N√£o suporta arquivos/pastas muito grandes
        - **Solu√ß√£o**:
            - Dividir em peda√ßos pequenos e enviar cada peda√ßo (CLIENTE)
            - Receber cada peda√ßo e escrev√™-lo imediatamente no disco (SERVER)

- **Vers√£o 3**
    - Baseada na Vers√£o 2
    - Cada cliente ter√° um diret√≥rio:
        - Quando um arquivo for enviado, ele aparece no servidor e no cliente.
        - Outros clientes podem ver o arquivo apenas se o cliente que enviou escolher a op√ß√£o p√∫blico ou privado.

- **Vers√£o Final**
    - **Brainstorm**:
        - **Objetivo**:
            - Criar uma solu√ß√£o escal√°vel, segura e eficiente para transfer√™ncia de arquivos.
        - **Funcionalidades principais**:
            - Suporte a arquivos e diret√≥rios de qualquer tamanho.
            - Implementa√ß√£o de autentica√ß√£o e criptografia para maior seguran√ßa.
            - Interface gr√°fica para facilitar o uso.
            - Logs detalhados para auditoria e an√°lise.
        - **Estrat√©gias t√©cnicas**:
            - Utilizar protocolos modernos como HTTP/2 ou WebSocket para comunica√ß√£o.
            - Implementar compress√£o de dados para reduzir o tempo de transfer√™ncia.
            - Adicionar suporte a m√∫ltiplos clientes simult√¢neos com gerenciamento de prioridade.
        - **Testes e valida√ß√£o**:
            - Testar em diferentes condi√ß√µes de rede (alta lat√™ncia, baixa largura de banda).
            - Garantir compatibilidade com sistemas operacionais populares.
            - Realizar testes de carga para avaliar desempenho em cen√°rios extremos.

---

## Estrutura atual das pastas
- **Cliente**:
    - `client.py`: Script principal para envio de arquivos.
    - `utils.py`: Fun√ß√µes auxiliares como c√°lculo de checksum e manipula√ß√£o de arquivos.
    - `config.json`: Arquivo de configura√ß√£o com par√¢metros como IP e porta do servidor.
    - `logs/`: Diret√≥rio para armazenar logs de opera√ß√µes realizadas pelo cliente.

- **Servidor**:
    - `server.py`: Script principal para recep√ß√£o de arquivos.
    - `utils.py`: Fun√ß√µes auxiliares como valida√ß√£o de checksum e gerenciamento de diret√≥rios.
    - `config.json`: Arquivo de configura√ß√£o com par√¢metros como IP e porta de escuta.
    - `storage/`: Diret√≥rio onde os arquivos recebidos s√£o armazenados.
    - `logs/`: Diret√≥rio para armazenar logs de opera√ß√µes realizadas pelo servidor.

- **Testes**:
    - `test_large_files.py`: Script para testar envio e recep√ß√£o de arquivos grandes.
    - `test_checksum.py`: Script para validar a implementa√ß√£o de checksum.
    - `samples/`: Diret√≥rio contendo arquivos de amostra para teste.

- **Documenta√ß√£o**:
    - `README.md`: Instru√ß√µes de uso e configura√ß√£o.
    - `CHANGELOG.md`: Hist√≥rico de altera√ß√µes e melhorias.
    - `ToDo.md`: Lista de pend√™ncias e funcionalidades planejadas.

---

## Recursos para teste
- **CyberNet Dom Bas√≠lio**
    - Oferece arquivos de teste para download, incluindo um arquivo de 500 MB para testar sua conex√£o.
    - [üîó Teste sua conex√£o! ‚Äì CyberNet](https://cybernetdombasilio.com.br/site/index.php/teste-sua-conexao/)

- **GetSampleFiles.com**
    - Disponibiliza uma variedade de arquivos de amostra em diferentes formatos e tamanhos, incluindo arquivos compactados como ZIP, RAR, TAR, 7Z, GZIP e BZIP2.
    - [üîó Obter arquivos de amostra para teste](https://pt.getsamplefiles.com/arquivos-de-amostra)
